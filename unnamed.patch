Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	(date 1746007269673)
@@ -1,6 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
+  <component name="VcsDirectoryMappings" defaultProject="true" />
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	(date 1746007280968)
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: LearnJava/src/HTML/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/HTML/index.html b/LearnJava/src/HTML/index.html
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/HTML/index.html	(date 1746007234070)
@@ -0,0 +1,10 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8">
+  <title>$Title$</title>
+</head>
+<body>
+$END$
+</body>
+</html>
\ No newline at end of file
Index: LearnJava/src/Test/NOD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Test/NOD.java b/LearnJava/src/Test/NOD.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/Test/NOD.java	(date 1746007234086)
@@ -0,0 +1,12 @@
+package Test;
+
+public class NOD {
+    public static int nod(int a, int b){
+        if(a == 0) return b;
+        return NOD.nod(b % a, a);
+    }
+
+    public static void main(String[] args){
+
+    }
+}
Index: LearnJava/src/Grokaem/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/Main.java b/LearnJava/src/Grokaem/Main.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/Main.java	(date 1746007234070)
@@ -0,0 +1,7 @@
+package Grokaem;
+
+public class Main {
+    public static void main(String[] args) {
+        System.out.println("YYYes");
+    }
+}
\ No newline at end of file
Index: LearnJava/src/Grokaem/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/Test.java b/LearnJava/src/Grokaem/Test.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/Test.java	(date 1746007234070)
@@ -0,0 +1,14 @@
+package Grokaem;
+
+import java.util.HashMap;
+
+public class Test {
+    public static void main(String[] args){
+        int[] ints = { 1, 2, 3};
+        for(int i = 0; i < ints.length; i++){
+            if( i - 1 >= 0 && ints[i - 1] > 0){
+                System.out.println(ints[i - 1]);
+            }
+        }
+    }
+}
Index: LearnJava/src/Grokaem/Graph.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/Graph.java b/LearnJava/src/Grokaem/Graph.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/Graph.java	(date 1746007234070)
@@ -0,0 +1,53 @@
+package Grokaem;
+
+import java.util.*;
+
+
+public class Graph {
+    public static void main(String args[]){
+        System.out.println(search(getGraph()));
+    }
+
+    public static HashMap<String, String[]> getGraph(){
+        HashMap<String, String[]> graph = new HashMap<>();
+
+        graph.put("you", new String[]{"bob", "alice", "claire"});
+        graph.put("bob", new String[]{"peggi", "anuj"});
+        graph.put("alice", new String[]{"peggy"});
+        graph.put("claire", new String[]{"tom", "jonny"});
+        graph.put("tom",new String[]{"you"});
+        graph.put("jonny", null);
+        graph.put("anuj", null);
+        graph.put("peggy", null);
+
+        return graph;
+    }
+
+    public static String search(HashMap<String, String[]> graph){
+        Deque<String> que = new ArrayDeque<>();
+        Set<String> wasBeFriends = new HashSet<>();
+        que.add("you");
+        while(!que.isEmpty()){
+            String person = que.pollFirst();
+            wasBeFriends.add(person);
+            if(isMangoSeller(person)){
+                return person;
+            }else{
+                String[] friends = graph.get(person);
+                if(friends == null) continue;
+                for(int i = 0; i < friends.length; i++){
+                    if(friends[i] != null && !que.contains(friends[i]) && !wasBeFriends.contains(friends[i])){
+                        que.add(friends[i]);
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    public static boolean isMangoSeller(String person){
+        char[] chars = person.toCharArray();
+        if(chars[0] == 't') return true;
+        return false;
+    }
+}
Index: LearnJava/src/Grokaem/Queue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/Queue.java b/LearnJava/src/Grokaem/Queue.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/Queue.java	(date 1746007234070)
@@ -0,0 +1,4 @@
+package Grokaem;
+
+public class Queue {
+}
Index: LearnJava/src/Grokaem/TestHeshMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/TestHeshMap.java b/LearnJava/src/Grokaem/TestHeshMap.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/TestHeshMap.java	(date 1746007234070)
@@ -0,0 +1,38 @@
+package Grokaem;
+
+import java.util.HashMap;
+
+public class TestHeshMap {
+    public static void main(String args[]) {
+        HashMap<Integer, String> hashi = new HashMap<>();
+
+        hashi.put(29, "Tolik");
+        hashi.put(34, "Sonik");
+        hashi.put(10, "Mamik");
+
+        System.out.println(hashi);
+
+        System.out.println(hashi.containsKey(1)); // Проверяет существует ли такой ключь
+        System.out.println(hashi.containsValue("Mamik"));// Проверяеь сущ ли такое значение(ачувствителен к регисту)
+
+        hashi.remove(10);
+        System.out.println(hashi.get(10));
+
+        hashi.clear();
+        System.out.println(hashi);
+
+        hashi.put(29, "Tolik");
+        hashi.put(34, "Sonik");
+        hashi.put(10, "Mamik");
+        System.out.println(hashi.keySet());
+        System.out.println(hashi.values());
+
+        System.out.println(hashi.entrySet());
+
+        System.out.println(hashi.size());
+
+        System.out.println(hashi.isEmpty());
+
+        
+    }
+}
Index: LearnJava/src/Grokaem/HangryAlgiritm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/HangryAlgiritm.java b/LearnJava/src/Grokaem/HangryAlgiritm.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/HangryAlgiritm.java	(date 1746007234070)
@@ -0,0 +1,104 @@
+package Grokaem;
+
+import java.util.*;
+
+public class HangryAlgiritm {
+    public static void main(String[] args){
+        HashSet<String> states = new HashSet<>();
+        states.add("mt");
+        states.add("wa");
+        states.add("or");
+        states.add("id");
+        states.add("nv");
+        states.add("ut");
+        states.add("ca");
+        states.add("az");
+
+        HashMap<String, String[]> station = new HashMap<>();
+        station.put("kone", new String[]{"id", "nv", "ut"});
+        station.put("ktwo", new String[]{"wa", "id", "mt"});
+        station.put("kthree", new String[]{"or", "nv", "ca"});
+        station.put("kfout", new String[]{"nv", "ut"});
+        station.put("kfive", new String[]{"ca", "az"});
+
+        HashSet<String> stationNeeded = new HashSet<>();
+
+        HashSet<String> valid = states;
+        while (!valid.isEmpty()){
+
+            int maxPeresech = 0;
+            String stationMaxState = null;
+
+            for(String key : station.keySet()){
+                for(String statesInStation : station.get(key)){
+                    if(HangryAlgiritm.peresechMnojestv(valid, station.get(key)) > maxPeresech){
+                        maxPeresech = HangryAlgiritm.peresechMnojestv(valid, station.get(key));
+                        stationMaxState = key;
+                    }
+                }
+            }
+
+
+
+            stationNeeded.add(stationMaxState);
+            for (String statesDelete : station.get(stationMaxState)) {
+               valid.remove(statesDelete);
+            }
+            station.remove(stationMaxState);
+        }
+
+        System.out.println(stationNeeded);
+    }
+
+    private HashSet<String> difference (HashSet<String> a1, HashSet<String> a2){
+        HashSet<String> solution = new HashSet<>();
+        for(String a : a1){
+            if(!a2.contains(a)) solution.add(a);
+        }
+        return solution;
+    }
+
+    private static int peresechMnojestv (HashSet<String> ArrayStr1, String[] ArrayStr2){
+        int ret = 0;
+        for(String str1 : ArrayStr1){
+            for(String str2 : ArrayStr2){
+                if(str2.equals(str1)){
+                    ret++;
+                    break;
+                }
+            }
+        }
+        return ret;
+    }
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
Index: LearnJava/src/Grokaem/DinamicProgramic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/DinamicProgramic.java b/LearnJava/src/Grokaem/DinamicProgramic.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/DinamicProgramic.java	(date 1746007234070)
@@ -0,0 +1,56 @@
+package Grokaem;
+
+import java.util.HashMap;
+import java.util.jar.JarEntry;
+
+public class DinamicProgramic {
+    public static void main(String[] args){
+        String[] name = new String[]{"Вода", "Книга", "Еда", "Куртка", "Камера"};
+        int[] mass = new int[]{3, 1, 2, 2, 1};
+        int[] cost = new int[]{10, 3, 9, 5, 6};
+        int maxMass = 6;
+
+        String str1 = "solo";
+        String str2 = "Polo";
+        System.out.println(MostLongSubstring(str1, str2));
+    }
+
+    public static int TastOfBackpack(int[] mass, int[] cost, int maxMass){
+        int[][] matrix = new int[cost.length][maxMass];
+
+        for(int i = 0; i < cost.length; i++){
+            for(int j = 0; j < maxMass; j++){
+                if (i == 0) {if ( j + 1 >= mass[i] ) matrix[i][j] = cost[i];} // Созданно для заполнения первой строки
+                else if (cost[i] > matrix[i-1][j] &&
+                        j + 1 == mass[i]) // Для случаев когда масса равна
+                {
+                    matrix[i][j] = cost[i];
+                }
+                else if (j + 1 > mass[i] &&
+                        cost[i] + matrix[i -1][j - mass[i]] > matrix[i-1][j]) // Для случаев когда масса больше
+                {
+                    matrix[i][j] = cost[i] + matrix[i - 1][j - mass[i]];
+                }
+                else matrix[i][j] = matrix[i-1][j]; // Дефолтный случай
+            }
+        }
+        return matrix[cost.length - 1][maxMass - 1];
+    }
+
+    public static int MostLongSubstring(String str1, String str2){
+        char[] chars1 = str1.toCharArray();
+        char[] chars2 = str2.toCharArray();
+
+        int[][] matrix = new int[chars1.length][chars2.length];
+        int maxint = 0;
+        for(int i = 0; i < chars1.length; i++){
+            for(int j = 0; j < chars2.length; j++){
+                if((i-1 < 0 || j-1 < 0) && chars1[i] == chars2[j]) matrix[i][j] = 1;
+                else if (chars1[i] == chars2[j]) matrix[i][j] = matrix[i - 1][j - 1] + 1;
+                if(matrix[i][j] > maxint) maxint = matrix[i][j];
+            }
+        }
+
+        return maxint;
+    }
+}
Index: LearnJava/src/Grokaem/DijkstrasAlgorithm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/Grokaem/DijkstrasAlgorithm.java b/LearnJava/src/Grokaem/DijkstrasAlgorithm.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/Grokaem/DijkstrasAlgorithm.java	(date 1746007234070)
@@ -0,0 +1,22 @@
+package Grokaem;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class DijkstrasAlgorithm {
+    public static void main(String[] args){
+
+    }
+}
+
+class Graf {
+    public Map<String, String[]> graph = new HashMap<>();
+    public Map<String[], Integer> cost = new HashMap<>();
+    public Graf(){
+        this.graph.put("start", new String[]{"A", "B"});
+        this.graph.put("A", new String[]{"end"});
+        this.graph.put("B", new String[]{"end"});
+
+
+    }
+}
Index: LearnJava/src/LeetCode/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/LeetCode/Main.java b/LearnJava/src/LeetCode/Main.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/LeetCode/Main.java	(date 1746007234070)
@@ -0,0 +1,16 @@
+package LeetCode;
+
+import java.sql.SQLOutput;
+import java.util.*;
+
+public class Main {
+    public static void main(String[] args){
+        System.out.println(new Solution().threeSum(new int[]{-1,0,1,2,-1,-4}));
+        int[] array = {1, 2, 3};
+
+        Integer[] integerArray = Arrays.stream(array).boxed().toArray(Integer[]::new);
+
+        // Преобразование массива в изменяемый список
+        List<Integer> list = new ArrayList<>(Arrays.asList(integerArray));
+    }
+}
Index: LearnJava/src/LeetCode/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/LeetCode/Test.java b/LearnJava/src/LeetCode/Test.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/LeetCode/Test.java	(date 1746007234070)
@@ -0,0 +1,10 @@
+package LeetCode;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class Test {
+   public static void main(String[] args){
+
+   }
+}
Index: LearnJava/src/LeetCode/MInStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/LeetCode/MInStack.java b/LearnJava/src/LeetCode/MInStack.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/LeetCode/MInStack.java	(date 1746007234070)
@@ -0,0 +1,5 @@
+package LeetCode;
+
+import java.util.Stack;
+
+
Index: LearnJava/src/LeetCode/Solution.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/LeetCode/Solution.java b/LearnJava/src/LeetCode/Solution.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/LeetCode/Solution.java	(date 1746007234070)
@@ -0,0 +1,428 @@
+package LeetCode;
+
+import javax.swing.*;
+import java.util.*;
+
+import static java.lang.Math.abs;
+
+class Solution {
+
+    static public int removeDuplicates(int[] nums) {
+        int i = 1;
+        for (int j = 1; j < nums.length; j++) {
+            if (nums[j] != nums[j - 1]) {
+                nums[i] = nums[j];
+                i++;
+            }
+        }
+        return i;
+    }
+
+    public static int[] twoSum(int[] nums, int target) {
+        int newNums[] = new int[2];
+        for (int i = 1; i < nums.length; i++) {
+            for (int j = 0; j + i < nums.length; j++) {
+                if (nums[j] + nums[j + i] == target) {
+                    newNums[0] = j;
+                    newNums[1] = j + i;
+                    return newNums;
+                }
+            }
+        }
+        return newNums;
+    }
+
+    static public int removeElement(int[] nums, int val) {
+        int k = 0;
+        for (int i = 0; i < nums.length; i++) {
+            if (nums[i] != val) {
+                nums[k] = nums[i];
+                k++;
+            }
+        }
+        return k;
+    }
+
+    public int searchInsert(int[] nums, int target) {
+        int min = 0, search = 0;
+        int max = nums.length - 1;
+
+        while (min <= max) {
+            search = (min + max) / 2;
+
+            if (nums[search] == target) return search;
+            else if (nums[search] < target) min = search + 1;
+            else max = search - 1;
+
+        }
+        return min;
+    }
+
+    public int[] plusOneV2(int[] digits) {
+        for (int i = digits.length - 1; i >= 0; i--) {
+            if (digits[i] < 9) {
+                digits[i]++;
+                return digits;
+            } else {
+                digits[i] = 0;
+            }
+        }
+        int[] newDigits = new int[digits.length + 1];
+        newDigits[0] = 1;
+        for (int j = 0; j < digits.length; j++) {
+            newDigits[j + 1] = digits[j];
+        }
+        return newDigits;
+
+    }
+
+    static public int[] plusOne(int[] digits) {
+        int i = digits.length - 1;
+        int s = digits.length;
+        do {
+            digits[i]++;
+            if (digits[i] == 10) digits[i] = 0;
+            i--;
+        } while (digits[i + 1] == 0 && i >= 0);
+
+        if (digits[i + 1] != 0) {
+            return digits;
+        } else {
+            int[] newDigits = new int[s + 1];
+            newDigits[0] = 1;
+            for (int j = 0; j < digits.length; j++) {
+                newDigits[j + 1] = digits[j];
+            }
+            return newDigits;
+        }
+    }
+
+    public static void merge(int[] nums1, int m, int[] nums2, int n) {
+        int ch_m = m - 1;
+        int ch_n = n - 1;
+
+        for (int i = n + m - 1; i >= 0; i--) {
+            if (ch_m >= 0 && ch_n >= 0 && nums1[ch_m] > nums2[ch_n]) {
+                nums1[i] = nums1[ch_m--];
+            } else if (ch_n >= 0) {
+                nums1[i] = nums2[ch_n--];
+            }
+        }
+    }
+
+    public boolean isAnagram(String s, String t) {
+        char[] ch1 = s.toCharArray();
+        Arrays.sort(ch1);
+
+        char[] ch2 = t.toCharArray();
+        Arrays.sort(ch2);
+
+        return Arrays.equals(ch1, ch2);
+
+    }
+
+    public int[] topKFrequent(int[] nums, int k) {
+        Map<Integer, Integer> exist = new HashMap<>();
+        int array[] = new int[k];
+
+        for (int num : nums) {
+            if (!exist.containsKey(num)) exist.put(num, 1);
+            else exist.put(num, exist.get(num) + 1);
+        }
+
+        for (int i = 0; i < k; i++) {
+            int key = 0;
+            for (int j = 1; j < nums.length; j++) {
+                if (exist.get(nums[j]) > exist.get(nums[key])) key = j;
+            }
+            array[i] = nums[key];
+            exist.put(array[i], 0);
+        }
+        return array;
+    }
+
+    public String encode(List<String> strs) {
+        StringBuilder stringBuilder = new StringBuilder();
+
+        for (int i = strs.size() - 1; i <= 0; i--) {
+
+        }
+        stringBuilder.delete(0, 2);
+        return stringBuilder.toString();
+    }
+
+    public List<String> decode(String str) {
+        List<String> list = new ArrayList<>();
+        String[] arr = str.split(",");
+        for (String s : arr) {
+            list.add(s);
+        }
+        return list;
+    }
+
+    public int[] productExceptSelf(int[] nums) {
+        int[] res = new int[nums.length];
+        int product = 1;
+        int check = 0;
+        for (int num : nums) {
+            if (num != 0) product *= num;
+            else check++;
+        }
+
+        switch (check) {
+            case (0):
+                for (int i = 0; i < nums.length; i++) {
+                    res[i] = product / nums[i];
+                }
+                break;
+
+            case (1):
+                for (int i = 0; i < nums.length; i++) {
+                    if (nums[i] != 0) res[i] = 0;
+                    else res[i] = product;
+                }
+                break;
+
+            default:
+                for (int num : res) {
+                    num = 0;
+                }
+        }
+        return res;
+    }
+
+    public boolean isValidSudoku(char[][] board) {
+        for (int i = 0; i < 9; i++) {
+            Set<Character> setI = new HashSet<>();
+            Set<Character> setJ = new HashSet<>();
+            for (int j = 0; j < 9; j++) {
+
+                if (setI.contains(board[i][j])) return false;
+                else if (board[i][j] != '.') setI.add(board[i][j]);
+
+                if (setJ.contains(board[j][i])) return false;
+                else if (board[j][i] != '.') setJ.add(board[j][i]);
+
+            }
+        }
+
+        for (int i = 0; i < 9; i += 3) {
+            for (int j = 0; j < 9; j += 3) {
+                Set<Character> set = new HashSet<>();
+                for (int nI = i; nI < i + 3; nI++) {
+                    for (int nJ = j; nJ < j + 3; nJ++) {
+                        if (set.contains(board[nI][nJ])) return false;
+                        else if (board[nI][nJ] != '.') set.add(board[nI][nJ]);
+                    }
+                }
+            }
+        }
+        return true;
+    }
+
+    public boolean isValidSudokuV2(char[][] board) {
+        Set set = new HashSet();
+        for (int i = 0; i < 9; i++) {
+            for (int j = 0; j < 9; j++) {
+                char number = board[i][j];
+                if (number != '.') {
+                    if (!set.add(number + "row" + i) ||
+                            !set.add(number + "colum" + j) ||
+                            !set.add(number + "block" + i + j)
+                    ) return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    public int longestConsecutive(int[] nums) {
+        Arrays.sort(nums);
+
+        int maxQue = 0;
+        int buffQue = 1;
+
+        for (int i = 0; i + 1< nums.length; i++) {
+            if (nums[i] == nums[i + 1]) continue;
+            if (nums[i] + 1 == nums[i + 1]){
+                buffQue++;
+                if (maxQue < buffQue) maxQue = buffQue;
+            }
+            else buffQue = 1;
+        }
+        return maxQue;
+    }
+
+    public boolean isPalindrome(String s) {
+        s = s.replaceAll("(?U)[\\pP\\s]", "");
+        s = s.replaceAll("`", "");
+        System.out.println(s);
+        StringBuilder revers = new StringBuilder(s);
+        String r = revers.reverse().toString();
+        return r.equalsIgnoreCase(s);
+    }
+
+    public int[] twoSum2(int[] numbers, int target) {
+        int r = numbers.length - 1;
+        int l = 0;
+        while(r > l){
+            int sum = numbers[l] + numbers[r];
+
+            if (sum == target) return new int[]{l + 1, r + 1};
+            else if (sum > target) r--;
+            else l++;
+        }
+        return null;
+    }
+
+    public boolean isPalindrome(int x) {
+        String str = Integer.toString(x);
+        char[] chars = str.toCharArray();
+
+        int l = 0;
+        int r = chars.length - 1;
+
+        while (r > l) {
+            if (chars[l] != chars[r]) return false;
+            l++;
+            r--;
+        }
+        return true;
+    }
+
+    public boolean isPalindromev2(int x) {
+        int rev = 0;
+        int temp = x;
+
+        while (x > 0) {
+            rev = rev*10 + x%10;
+            x /= 10;
+        }
+
+        return rev == temp;
+    }
+
+    public String intToRoman(int num) {
+        int[] value = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
+        String[] sym = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
+
+        int i = 0;
+        StringBuilder s = new StringBuilder();
+        while (num > 0) {
+            if (num >= value[i]) {
+                s.append(sym[i]);
+                num -= value[i];
+            }else i++;
+        }
+        return s.toString();
+    }
+
+    public List<String> letterCombinations(String digits) {
+        Map<String, String[]> letters = new HashMap<>();
+        List<String> letterCombination = new ArrayList<>();
+        letterCombination.add("");
+
+      letters.put("2", new String[]{"a", "b", "c"});
+      letters.put("3", new String[]{"d", "e", "f"});
+      letters.put("4", new String[]{"g", "h", "i"});
+      letters.put("5", new String[]{"j", "k", "l"});
+      letters.put("6", new String[]{"m", "n", "o"});
+      letters.put("7", new String[]{"p", "q", "r", "s"});
+      letters.put("8", new String[]{"t", "u", "v"});
+      letters.put("9", new String[]{"w", "x", "y", "z"});
+
+      String[] digitsArray  = digits.split("");
+
+      for (int i = 0;i < digitsArray.length; i++) {
+          letterCombination = combine(letterCombination, letters.get(digitsArray[i]));
+      }
+
+
+      return letterCombination;
+    }
+
+    private List<String> combine (List<String> list, String[] stringsArray) {
+        List<String> nList = new ArrayList<>();
+
+        for (String l : list){
+            for (int i = 0; i < stringsArray.length; i++) {
+                nList.add(l + stringsArray[i]);
+            }
+        }
+
+        return nList;
+    }
+
+    public List<List<Integer>> MyThreeSum(int[] nums) {
+        if (nums.length % 3 != 0) return null;
+        int multiplicity = nums.length / 3;
+
+        Arrays.sort(nums);
+        List<Integer> elements = new ArrayList<>();
+
+        List<List<Integer>> threeSum = new ArrayList<>();
+
+        for(int num : nums) {
+            elements.add(num);
+        }
+
+        for (int x = 0; x < multiplicity; x++){
+            int last = elements.get(elements.size() - 1);
+            int first = elements.get(0);
+            for (int  i = 1; i < elements.size() - 1; i++) {
+                if ( last + first == -1 * elements.get(i)){
+                    List<Integer> list = new ArrayList<>();
+                    list.add(first);
+                    list.add(last);
+                    list.add(elements.get(i));
+                    elements.remove(i);
+                    elements.remove(0);
+                    elements.remove(elements.size() - 1);
+                    threeSum.add(list);
+                }
+            }
+        }
+        return threeSum;
+    }
+
+    public List<List<Integer>> threeSumv1(int[] nums) {
+        Arrays.sort(nums);
+        Set<List<Integer>> elements = new HashSet<>();
+        for (int i = 0; i < nums.length; i++) {
+            for (int j = i + 1; j < nums.length; j++) {
+                for (int f = j + 1; f < nums.length; f++) {
+                    if (nums[i] + nums[j] + nums[f] == 0) {
+                        List<Integer> tmp = Arrays.asList();
+                        elements.add(tmp);
+                    }
+                }
+            }
+        }
+        return new ArrayList<>(elements);
+    }
+
+    public List<List<Integer>> threeSum(int[] nums) {
+        Arrays.sort(nums);
+        Set<List<Integer>> res = new HashSet<>();
+        for(int i = 0; i < nums.length; i++) {
+            int l = 0;
+            int r = nums.length-1;
+            while (l < r) {
+                if (i == l) l++;
+                if (i == r) r--;
+                if (r == l) l++;
+                if (nums[i] + nums[r] + nums[l] == 0) {
+                    int[] arr = {nums[i], nums[l], nums[r]};
+                    Arrays.sort(arr);
+                    Integer[] integerArray = Arrays.stream(arr).boxed().toArray(Integer[]::new);
+
+                    List<Integer> list = new ArrayList<>(Arrays.asList(integerArray));
+                    res.add(list);
+                }
+                if (nums[r] + nums [l] + nums[i] > 0) r--;
+                else l++;
+            }
+        }
+        return new ArrayList<>(res);
+    }
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/If.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/If.java b/LearnJava/src/SampleJava/Lessons/If.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/If.java	(date 1746007234086)
@@ -0,0 +1,14 @@
+package SampleJava.Lessons;
+
+public class If {
+    public static void main(String [] args){
+        int myInt = 10;
+        if(myInt<10){
+            System.out.println("Меньше 10");
+        } else if (myInt> 10){
+            System.out.println("Больше 10");
+        }else{
+            System.out.println("Равно 10");
+        }
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Enum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Enum.java b/LearnJava/src/SampleJava/Lessons/Enum.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Enum.java	(date 1746007234086)
@@ -0,0 +1,4 @@
+package SampleJava.Lessons;
+
+public class Enum {
+}
Index: LearnJava/src/SampleJava/Lessons/Time.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Time.java b/LearnJava/src/SampleJava/Lessons/Time.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Time.java	(date 1746007234086)
@@ -0,0 +1,35 @@
+package SampleJava.Lessons;
+
+
+import java.sql.SQLOutput;
+import java.time.*;
+import java.util.Date;
+import java.util.Calendar;
+import java.util.Set;
+import java.util.TimeZone;
+
+public class Time {
+    public static void main(String[] args){
+        Date now = new Date();
+        //System.out.println(now);
+
+        Calendar calendar = Calendar.getInstance();
+        System.out.println(calendar.getTimeZone());
+        System.out.println();
+
+        TimeZone zone = TimeZone.getTimeZone("Africa/Juba");
+        System.out.println(zone.getDisplayName());
+
+        System.out.println();
+
+        LocalDate today = LocalDate.now();
+        System.out.println(today);
+
+        LocalTime thistime = LocalTime.now();
+        System.out.println(thistime);
+
+        Set<String> allId = ZoneId.getAvailableZoneIds();
+        System.out.println(allId);
+
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/input.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/input.java b/LearnJava/src/SampleJava/Lessons/input.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/input.java	(date 1746007234086)
@@ -0,0 +1,22 @@
+package SampleJava.Lessons;
+
+import java.util.Scanner;
+
+//public class input {
+//    public static void main(String[] args) {
+//        Scanner s = new Scanner(System.in);/* s Это объект класса Scanner который в дальнейшем используем ниже*/
+//        System.out.printf("Введите что-нибудь "+);
+//        int myInt = s.nextInt();
+//
+//        System.out.printf("вы ввели "+ myInt);
+//    }
+//}
+
+public class input {
+    public static void main(String[] args){
+        Scanner scanner = new Scanner("Petruh ty lox\n"+"oh yes");
+        String s = scanner.nextLine() ;
+        System.out.println(s);
+
+    }
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/Arrays.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Arrays.java b/LearnJava/src/SampleJava/Lessons/Arrays.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/Arrays.java	(date 1746007234070)
@@ -0,0 +1,15 @@
+package SampleJava.Lessons;
+
+public class Arrays {
+    public static void main(String args[]){
+        int MyInt = 10; //Примитивный тип данных   [10]
+        int[] numbers = new int[5];            // numbers -> [массив]  Ссылочный тип данных
+        for(int i = 0;i<numbers.length; i++){
+            numbers[i] = i*10;
+            System.out.println(numbers[i]);
+        }
+        int[] numbers1 = {1,2,3,4};
+        for (int i = 0; i<numbers1.length; i++ ) System.out.println(numbers1[i]);
+        System.out.println("Sucsus");
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Switch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Switch.java b/LearnJava/src/SampleJava/Lessons/Switch.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Switch.java	(date 1746007234086)
@@ -0,0 +1,24 @@
+package SampleJava.Lessons;
+
+import java.util.Scanner;
+
+public class Switch {
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+        System.out.printf("Введи возраст ");
+        int age = scanner.nextInt();
+        switch (age) {
+            case 5:// case как бы заменяет If(age==5){}
+                System.out.printf("Your age is 5");
+                break;
+            case 10:
+                System.out.printf("You are 10");
+                break;
+            case 20:
+                System.out.printf("You are 20");
+                break;
+            default: //Если все из выше перечисленных не подходить
+                System.out.printf("Ты не тот возраст выбрал");
+        }
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/DoWhile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/DoWhile.java b/LearnJava/src/SampleJava/Lessons/DoWhile.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/DoWhile.java	(date 1746007234070)
@@ -0,0 +1,16 @@
+package SampleJava.Lessons;
+
+import java.util.Scanner;
+
+public class DoWhile {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int myInt;
+        do{
+            System.out.printf("Введи пятерку");
+            myInt = sc.nextInt();
+        }while(myInt!=5);//Делать то что выше пока while не станет истиным
+        System.out.printf("Победа");
+    }
+
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/ForLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/ForLoop.java b/LearnJava/src/SampleJava/Lessons/ForLoop.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/ForLoop.java	(date 1746007234086)
@@ -0,0 +1,9 @@
+package SampleJava.Lessons;
+
+public class ForLoop {
+    public static void main(String[] args){
+        for (int i = 0;i<10;i++){                 // i++ == i = i+1 //Инициализируем переменную; Условие выполнения цикла; Что будет происходить с переменной за цикл
+            System.out.println("Hello world");
+        }
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Strings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Strings.java b/LearnJava/src/SampleJava/Lessons/Strings.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Strings.java	(date 1746007234086)
@@ -0,0 +1,13 @@
+package SampleJava.Lessons;
+
+public class Strings {
+    public static void main(String[] args) {
+        double x = 2323.23;
+        String s = "Hello";
+        String space = " ";
+        String name = "Vitalya";
+        System.out.println(s+space+name);// При помощи "+" можно соединять строк
+        System.out.println("Hello"+" "+"world");// Шорткат sout чтобы быстро вызвыть System.out.println
+        System.out.println("My number is"+" "+x);
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Lesson20.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Lesson20.java b/LearnJava/src/SampleJava/Lessons/Lesson20.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Lesson20.java	(date 1746007234086)
@@ -0,0 +1,36 @@
+package SampleJava.Lessons;
+
+public class Lesson20 {
+    public static void main(String[] args) {
+       Human2.getID();
+    }
+}
+
+class Human2 {
+    private String name;
+    private int age;
+    public static int ID = 14;
+    public static void getID(){
+        System.out.println(ID);
+    }
+
+    public Human2(){
+        System.out.println("Object created ");
+    }
+    public Human2(String name, int age){
+        this.name = name;
+        this.age = age;
+    }
+
+    void setAge(int age) {
+        this.age = age;
+    }
+
+    void setName(String name) {
+        this.name = name;
+    }
+
+    void getInfo() {
+        System.out.println("Зовут " + name + " лет " + age);
+    }
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/Lesson22.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Lesson22.java b/LearnJava/src/SampleJava/Lessons/Lesson22.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Lesson22.java	(date 1746007234086)
@@ -0,0 +1,18 @@
+package SampleJava.Lessons;
+
+public class Lesson22 {
+    public static void main(String[] args){
+        String s = " eqw";
+
+        System.out.println(s.toUpperCase());
+
+        StringBuilder str = new StringBuilder("Hello string builder");
+        System.out.println();
+
+        System.out.printf("This is printf example %s \n", str);  //Вставляемт вместо %s Строку после запятой
+        System.out.printf("This is printf example %d \n", 3 );// Вставяет вметсто %d Чимло после запятой
+        System.out.printf("This is printf example %10d \n", 3 );// Перед типом данных после процента можно выделить кол-во пустых символов перед число
+        System.out.printf("This is printf example %-10d \n", 3 ); // Число идет с лево на право
+        System.out.printf("This is printf example %.2f \n", 3.423424234234234 ); // Округляет число до n цифор послел запятой
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Variables.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Variables.java b/LearnJava/src/SampleJava/Lessons/Variables.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Variables.java	(date 1746007234086)
@@ -0,0 +1,17 @@
+package SampleJava.Lessons;
+
+public class Variables {
+    public static void main(String[] args){
+        int myInt = 12; // 32 бита целые числа
+        short myShort = 3443; // 16 битные целые числа
+        long myLong = 432342314; // 64 бита целые числа
+
+        double myDouble = 234.34; // 64 бита число с точкой
+        float myFlout = 2323.323f; // 32 бита число с точкой после числа ставится f
+
+        char c = 'a'; // Символы
+        boolean b = true; // Логический тип переменной
+        byte myByte = 10; // целочисленное число размером в 1 байт
+        System.out.println(myInt);
+}
+}
Index: LearnJava/src/SampleJava/Lessons/Helloworld.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Helloworld.java b/LearnJava/src/SampleJava/Lessons/Helloworld.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Helloworld.java	(date 1746007234086)
@@ -0,0 +1,7 @@
+package SampleJava.Lessons;
+
+public class Helloworld {
+    public static void main(String [] args) {
+        System.out.println("Hello world");
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/WhileLoops.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/WhileLoops.java b/LearnJava/src/SampleJava/Lessons/WhileLoops.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/WhileLoops.java	(date 1746007234086)
@@ -0,0 +1,12 @@
+package SampleJava.Lessons;
+
+public class WhileLoops {
+    public static void main(String[] args){
+        int value = 0;
+        while (value != 5){ // Если что напсисанное в круглых скобках правда: делать то что cнизу
+            System.out.println("Hello world"+value);
+            value = value+1;
+
+        }
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Calculation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Calculation.java b/LearnJava/src/SampleJava/Lessons/Calculation.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/Calculation.java	(date 1746007234070)
@@ -0,0 +1,2 @@
+//Check 2
+//Check 
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/inheritance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/inheritance.java b/LearnJava/src/SampleJava/Lessons/inheritance.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/inheritance.java	(date 1746007234086)
@@ -0,0 +1,24 @@
+package SampleJava.Lessons;
+
+public class inheritance {
+    public static void main(String args[]){
+        Dog dog = new Dog();
+        dog.gow();
+    }
+}
+
+class Animal{
+    public void eat(){
+        System.out.println("I'me eating");
+    }
+
+    public void sleep(){
+        System.out.println("I'm sleep");
+    }
+}
+
+class Dog extends Animal {
+    public void gow(){
+        System.out.println("GOOW");
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/ClassPackege.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/ClassPackege.java b/LearnJava/src/SampleJava/Lessons/ClassPackege.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/ClassPackege.java	(date 1746007234070)
@@ -0,0 +1,10 @@
+package SampleJava.Lessons;
+
+import java.lang.constant.PackageDesc;
+
+public class ClassPackege {
+    public void main (String[] args) {
+        int l;
+        int r;
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/Lesson19This.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Lesson19This.java b/LearnJava/src/SampleJava/Lessons/Lesson19This.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Lesson19This.java	(date 1746007234086)
@@ -0,0 +1,42 @@
+package SampleJava.Lessons;
+
+import java.util.Scanner;
+
+public class Lesson19This {
+    public static void main(String[] args){
+        Scanner s = new Scanner(System.in);
+        Human human1 = new Human();
+        human1.setName(s.nextLine());
+        System.out.printf(human1.getName());
+    }
+
+}
+
+class Human{
+    private String name;
+    private int age;
+
+    public void setName(String name){
+        if(name.isEmpty() == false) {
+            this.name = name;
+        }else {
+            System.out.println("Enter your name");
+        }
+    }
+
+    public void setAge(int age){
+         this.age = age;
+    }
+
+    public int getAge(){
+        return age;
+    }
+
+    public String getName(){
+        return name;
+    }
+
+    public void getInfo(){
+        System.out.println(name+" "+age);
+    }
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/Continue_break.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Continue_break.java b/LearnJava/src/SampleJava/Lessons/Continue_break.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/Continue_break.java	(date 1746007234070)
@@ -0,0 +1,24 @@
+package SampleJava.Lessons;
+
+public class Continue_break {
+  /*  public static void main(String[] args) {
+        int i = 0;
+        while(true){
+            System.out.println(i);
+            i++;
+            if (i > 10)
+            {
+                break;
+            }
+        }
+    }*/
+    public static void main(String[] args){
+        for (int i = 0; i<15; i++)
+        {
+            if(i%2 == 0){
+                continue; // Возращает ход программы обратно к циклу фор(отмеченно если навести на continue)
+            }
+            System.out.printf("Нечетное число "+i+"\n");
+        }
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/LambdaFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/LambdaFunction.java b/LearnJava/src/SampleJava/Lessons/LambdaFunction.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/LambdaFunction.java	(date 1746007234086)
@@ -0,0 +1,29 @@
+package SampleJava.Lessons;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.Consumer;
+
+public class LambdaFunction {
+    public static void main(String[] args){
+        ArrayList<Integer> list = new ArrayList<Integer>();
+        list.add(1);
+        list.add(3);
+        list.add(4);
+        list.add(5);
+        list.add(6);
+
+
+        Consumer<Integer> method = (n) -> System.out.println(n);
+
+        list.forEach((n) -> {
+            System.out.println(n);
+            n += 5;
+            System.out.println(n);
+        } );
+
+        list.forEach(method);
+
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/ArraysOfStringth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/ArraysOfStringth.java b/LearnJava/src/SampleJava/Lessons/ArraysOfStringth.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/ArraysOfStringth.java	(date 1746007234070)
@@ -0,0 +1,24 @@
+package SampleJava.Lessons;
+
+import java.sql.SQLOutput;
+
+public class ArraysOfStringth {
+    public static void main(String[] args) {
+        int[] arrays = new int[10];
+        arrays[0] = 1;
+        arrays[1] = 5;
+        String[] stting = new String[2];
+        stting[0] = "Привет";
+        stting[1] = "Java";
+        System.out.println(stting[0]);
+        System.out.println(stting[1]+'\n');
+
+        for(String x:stting) System.out.println(x);
+        System.out.println("");
+        int[] numbers = {1,2,3,4,5,6,7,8,9};
+        int sum = 0;
+        for(int x:numbers) sum = sum + x;
+        System.out.println(sum);
+
+    }
+}
Index: LearnJava/src/SampleJava/Lessons/ClassesAndObjects.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/ClassesAndObjects.java b/LearnJava/src/SampleJava/Lessons/ClassesAndObjects.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Lessons/ClassesAndObjects.java	(date 1746007234070)
@@ -0,0 +1,37 @@
+package SampleJava.Lessons;
+
+public class ClassesAndObjects {
+    public static void main(String[] args){
+        Person person1 = new Person();
+        person1.setNameAndAge("Vitalay", 15);
+        person1.speak();
+
+
+    }
+}
+
+class Person {
+    String name;
+    int age;
+
+    void setNameAndAge(String username, int age1){
+        if(username != null && username.trim().isEmpty()) name = username;
+        if(age1 % 1 == 0 && age1 > 0 && age1 < 150 ) age = age1;
+
+    }
+
+    int calculateYearsToRetirement(){
+        int years = 65 - age;
+        return years;
+    }
+
+    void speak(){
+        for(int i = 0; i < 1; i++) {
+            System.out.println("Меня зовут " + name + " мне " + age + " лет");
+        }
+    }
+
+    void SpeakHello(){
+        System.out.println("Hello");
+    }
+}
\ No newline at end of file
Index: LearnJava/src/SampleJava/Lessons/MethodsWorkWithString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/MethodsWorkWithString.java b/LearnJava/src/SampleJava/Lessons/MethodsWorkWithString.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/MethodsWorkWithString.java	(date 1746007234086)
@@ -0,0 +1,4 @@
+package SampleJava.Lessons;
+
+public class MethodsWorkWithString {
+}
Index: LearnJava/src/SampleJava/Lessons/Multidimensional_array.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Lessons/Multidimensional_array.java b/LearnJava/src/SampleJava/Lessons/Multidimensional_array.java
new file mode 100644
--- /dev/null	(date 1746007234086)
+++ b/LearnJava/src/SampleJava/Lessons/Multidimensional_array.java	(date 1746007234086)
@@ -0,0 +1,35 @@
+package SampleJava.Lessons;
+
+import java.util.Scanner;
+
+public class Multidimensional_array {
+    public static void main(String[] args) {
+        int[][] matrix = {{1, 3, 4},
+                          {1, 7, 5},
+                          {1, 0, 5}};
+        System.out.println(matrix[2][1]);
+
+        String[][] strings = new String[2][3];
+        strings[0][0] = "Hello";
+        System.out.println(strings[0][0]);
+
+        Scanner a = new Scanner(System.in);
+        System.out.println("Enter number");
+        int[][] matrice = new int[2][2];
+
+        for(int i = 0; i < matrice.length; i++) {
+            for(int j = 0; j < matrice[i].length; j++){
+                matrice[i][j] = a.nextInt();
+            }
+        }
+
+        for(int i = 0; i < matrice.length; i++) {
+            for(int j = 0; j < matrice[0].length; j++) {
+                System.out.print(matrice[i][j]+" ");
+            }
+            System.out.println();
+        }
+    }
+}
+
+
Index: LearnJava/src/SampleJava/Interfaces/Info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Interfaces/Info.java b/LearnJava/src/SampleJava/Interfaces/Info.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Interfaces/Info.java	(date 1746007234070)
@@ -0,0 +1,5 @@
+package SampleJava.Interfaces;
+
+public interface Info {
+    public void showInfo();
+}
Index: LearnJava/src/SampleJava/Interfaces/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Interfaces/Test.java b/LearnJava/src/SampleJava/Interfaces/Test.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Interfaces/Test.java	(date 1746007234070)
@@ -0,0 +1,10 @@
+package SampleJava.Interfaces;
+
+public class Test {
+    public static void main(String[] args){
+        Info info1 = new Animal(1);
+        Info info2 = new Person("WOW");
+
+        info1.showInfo();
+    }
+}
Index: LearnJava/src/SampleJava/Interfaces/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Interfaces/Animal.java b/LearnJava/src/SampleJava/Interfaces/Animal.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Interfaces/Animal.java	(date 1746007234070)
@@ -0,0 +1,17 @@
+package SampleJava.Interfaces;
+
+public class Animal implements Info{
+    public int id;
+
+    public Animal(int id){
+        this.id = id;
+    }
+    public void sleep(){
+        System.out.println("I'm sleep");
+    }
+
+    @Override
+    public void showInfo() {
+        System.out.println("Name is "+this.id);
+    }
+}
Index: LearnJava/src/SampleJava/Interfaces/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/src/SampleJava/Interfaces/Person.java b/LearnJava/src/SampleJava/Interfaces/Person.java
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/src/SampleJava/Interfaces/Person.java	(date 1746007234070)
@@ -0,0 +1,17 @@
+package SampleJava.Interfaces;
+
+public class Person implements Info{
+    public String name;
+
+    public Person(String name){
+        this.name = name;
+    }
+
+    public void sayHello() {
+        System.out.println("HEllO");
+    }
+
+    public void showInfo(){
+        System.out.println("ID is " + this.name);
+    }
+}
Index: LearnJava/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.idea/vcs.xml b/LearnJava/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.idea/vcs.xml	(date 1746007234070)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: LearnJava/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.idea/misc.xml b/LearnJava/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.idea/misc.xml	(date 1746007234070)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: LearnJava/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.idea/.gitignore b/LearnJava/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.idea/.gitignore	(date 1746007234070)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: LearnJava/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.idea/modules.xml b/LearnJava/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.idea/modules.xml	(date 1746007234070)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/LearnJava.iml" filepath="$PROJECT_DIR$/LearnJava.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: LearnJava/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.idea/uiDesigner.xml b/LearnJava/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.idea/uiDesigner.xml	(date 1746007234070)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: LearnJava/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/.gitignore b/LearnJava/.gitignore
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/.gitignore	(date 1746007234070)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: LearnJava/LearnJava.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LearnJava/LearnJava.iml b/LearnJava/LearnJava.iml
new file mode 100644
--- /dev/null	(date 1746007234070)
+++ b/LearnJava/LearnJava.iml	(date 1746007234070)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: test_1/.vscode/settings.json
===================================================================
diff --git a/test_1/.vscode/settings.json b/test_1/.vscode/settings.json
deleted file mode 100644
--- a/test_1/.vscode/settings.json	
+++ /dev/null	
@@ -1,7 +0,0 @@
-{
-    "java.project.sourcePaths": ["src"],
-    "java.project.outputPath": "bin",
-    "java.project.referencedLibraries": [
-        "lib/**/*.jar"
-    ]
-}
Index: Grokaem Algoritms/.idea/misc.xml
===================================================================
diff --git a/Grokaem Algoritms/.idea/misc.xml b/Grokaem Algoritms/.idea/misc.xml
deleted file mode 100644
--- a/Grokaem Algoritms/.idea/misc.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="22" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: Grokaem Algoritms/.idea/modules.xml
===================================================================
diff --git a/Grokaem Algoritms/.idea/modules.xml b/Grokaem Algoritms/.idea/modules.xml
deleted file mode 100644
--- a/Grokaem Algoritms/.idea/modules.xml	
+++ /dev/null	
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/Grokaem Algoritms.iml" filepath="$PROJECT_DIR$/Grokaem Algoritms.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: Grokaem Algoritms/.idea/uiDesigner.xml
===================================================================
diff --git a/Grokaem Algoritms/.idea/uiDesigner.xml b/Grokaem Algoritms/.idea/uiDesigner.xml
deleted file mode 100644
--- a/Grokaem Algoritms/.idea/uiDesigner.xml	
+++ /dev/null	
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
diff --git a/LearnJava/src/SampleJava/Lessons/Testing.java b/LearnJava/src/SampleJava/Lessons/Testing.java
new file mode 100644
diff --git a/LearnJava/src/SampleJava/Lessons/ClasCreated.java b/LearnJava/src/SampleJava/Lessons/ClasCreated.java
new file mode 100644
diff --git a/test_1/README.md b/test_1/README.md
deleted file mode 100644
diff --git a/test_1/src/App.java b/test_1/src/App.java
deleted file mode 100644
diff --git a/test_1/java/public class Hello world {.java b/test_1/java/public class Hello world {.java
deleted file mode 100644
diff --git a/Grokaem Algoritms/src/Main.java b/Grokaem Algoritms/src/Main.java
deleted file mode 100644
diff --git a/Grokaem Algoritms/src/Graph.java b/Grokaem Algoritms/src/Graph.java
deleted file mode 100644
diff --git a/Grokaem Algoritms/src/Queue.java b/Grokaem Algoritms/src/Queue.java
deleted file mode 100644
diff --git a/Grokaem Algoritms/src/TestHeshMap.java b/Grokaem Algoritms/src/TestHeshMap.java
deleted file mode 100644
diff --git a/Grokaem Algoritms/.gitignore b/Grokaem Algoritms/.gitignore
deleted file mode 100644
diff --git a/Grokaem Algoritms/Grokaem Algoritms.iml b/Grokaem Algoritms/Grokaem Algoritms.iml
deleted file mode 100644
diff --git a/Grokaem Algoritms/.idea/.gitignore b/Grokaem Algoritms/.idea/.gitignore
deleted file mode 100644
